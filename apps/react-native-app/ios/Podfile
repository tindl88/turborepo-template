require 'json'

DEVELOPMENT_TEAM = "5D655C442Y";

# appPackage = JSON.parse(File.read(File.join('..', 'node_modules', '@react-native-firebase', 'app', 'package.json')))
# react-native 0.73 is currently iOS 13.4 as a minimum
min_ios_version_supported = 13.4

$FirebaseSDKVersion = '10.17.0'#appPackage['sdkVersions']['ios']['firebase']

# toggle this to true (and set 'use_frameworks!' below to test static frameworks)
$RNFirebaseAsStaticFramework = true
# Toggle this to true if you want to include optional support for extended analytics features
$RNFirebaseAnalyticsEnableAdSupport = true
# Toggle this to true if you want to include support for on device conversion measurement APIs
$RNFirebaseAnalyticsGoogleAppMeasurementOnDeviceConversion = true

######################################################################
Pod::UI.puts "Using Firebase SDK version '#{$FirebaseSDKVersion}'"
######################################################################

def node_require(script)
  # Resolve script with node to allow for hoisting
  require Pod::Executable.execute_command('node', ['-p',
    "require.resolve(
      '#{script}',
      {paths: [process.argv[1]]},
    )", __dir__]).strip
end

node_require('react-native/scripts/react_native_pods.rb')
node_require('react-native-permissions/scripts/setup.rb')

platform :ios, min_ios_version_supported
prepare_react_native_project!

# See permission here: https://github.com/zoontek/react-native-permissions
setup_permissions(['Camera'])

flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.disabled # True

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'Bully' do

  config = use_native_modules!

  # use_frameworks! :linkage => :static

  # Make all the other frameworks into static frameworks by overriding the static_framework? function to return true
  static_frameworks = [
    # 'VisionCamera',
  ]

  # Comment use_frameworks if use lines below
  pod 'FirebaseCore', :modular_headers => true
  pod 'FirebaseCoreInternal', :modular_headers => true
  pod 'FirebaseCoreExtension', :modular_headers => true
  pod 'FirebaseInstallations', :modular_headers => true
  pod 'FirebaseSessions', :modular_headers => true
  pod 'GoogleUtilities', :modular_headers => true
  pod 'GoogleDataTransport', :modular_headers => true
  pod 'nanopb', :modular_headers => true

  use_react_native!(
    :path => config[:reactNativePath],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => flipper_config,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'BullyTests' do
    inherit! :complete
    # Pods for testing
  end

  pre_install do |installer|
    installer.pod_targets.each do |pod|
      if static_frameworks.include?(pod.name)
        puts "Overriding the static_framework? method for #{pod.name}"
        def pod.static_framework?;
          true
        end
        def pod.build_type;
          Pod::BuildType.static_library
        end
      end
    end
  end

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )

    installer.generated_projects.each do |project|
      project.targets.each do |target|
          target.build_configurations.each do |config|
              config.build_settings["DEVELOPMENT_TEAM"] = DEVELOPMENT_TEAM
          end
      end
    end

    installer.aggregate_targets.each do |aggregate_target|
      aggregate_target.user_project.native_targets.each do |target|
        target.build_configurations.each do |config|
          # Arch selection is needed to work across M1/Intel macs, became necessary when App Check was added
          config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
          config.build_settings['EXCLUDED_ARCHS'] = 'i386'
        end
      end
      aggregate_target.user_project.save
    end

    installer.pods_project.targets.each do |target|
      # Turn off warnings on non-RNFB dependencies - some of them are really really noisy
      if !target.name.include? "RNFB"
        target.build_configurations.each do |config|
          config.build_settings["GCC_WARN_INHIBIT_ALL_WARNINGS"] = "YES"
        end
      end

      # Bumps minimum deploy target to ours (which is >12.4): https://github.com/facebook/react-native/issues/34106
      target.build_configurations.each do |config|
        config.build_settings["GCC_WARN_INHIBIT_ALL_WARNINGS"] = "YES"
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = min_ios_version_supported
        # config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', '_LIBCPP_ENABLE_CXX17_REMOVED_UNARY_BINARY_FUNCTION']
      end
    end
  end

  # Fix Xcode 14 warnings like:
  # warning: Run script build phase '[CP] Copy XCFrameworks' will be run during every build because it does not specify any outputs. To address this warning, either add output dependencies to the script phase, or configure it to run in every build by unchecking "Based on dependency analysis" in the script phase. (in target 'ATargetNameHere' from project 'YourProjectName')
  # Ref.: https://github.com/CocoaPods/CocoaPods/issues/11444
  post_integrate do |installer|
    main_project = installer.aggregate_targets[0].user_project
    pods_project = installer.pods_project
    targets = main_project.targets + pods_project.targets
    targets.each do |target|
      run_script_build_phases = target.build_phases.filter { |phase| phase.is_a?(Xcodeproj::Project::Object::PBXShellScriptBuildPhase) }
      cocoapods_run_script_build_phases = run_script_build_phases.filter { |phase| (phase.name&.start_with?("Create Symlinks to Header Folders") || phase.name&.start_with?("Bundle React Native") || phase.name&.start_with?("Copy Detox Framework")) }
      cocoapods_run_script_build_phases.each do |run_script|
        next unless (run_script.input_paths || []).empty? && (run_script.output_paths || []).empty?
        run_script.always_out_of_date = "1"
      end
    end
    main_project.save
    pods_project.save
  end
end
